{"remainingRequest":"/Users/yukimuramanase/Desktop/TeamA-app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yukimuramanase/Desktop/TeamA-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yukimuramanase/Desktop/TeamA-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yukimuramanase/Desktop/TeamA-app/src/views/ItemDetail.vue?vue&type=template&id=bd58d604&","dependencies":[{"path":"/Users/yukimuramanase/Desktop/TeamA-app/src/views/ItemDetail.vue","mtime":1629684866705},{"path":"/Users/yukimuramanase/Desktop/TeamA-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yukimuramanase/Desktop/TeamA-app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yukimuramanase/Desktop/TeamA-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yukimuramanase/Desktop/TeamA-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}